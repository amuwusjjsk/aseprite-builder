name: Build and release Aseprite

on:
  push:
    branches: 
      - main 
    paths: 
      - 'BuildLog.md'
  workflow_dispatch:
env:
  BUILD_TYPE: Release

jobs:
  fetch-aseprite-info:
    name: Fetch deps info
    runs-on: ubuntu-latest
    outputs:
      download-link: ${{ steps.get-release.outputs.download-link }}
      release-tag: ${{ steps.get-release.outputs.release-tag }}
    steps:
      - name: Get latest Aseprite release (including pre-releases)
        id: get-release
        run: |
          # 获取最新的发布版本（包括预发布版本）
          response=$(curl -s "https://api.github.com/repos/aseprite/aseprite/releases")
          latest_release=$(echo "$response" | jq -r '.[0]')
          
          release_tag=$(echo "$latest_release" | jq -r '.tag_name')
          echo "找到最新版本: $release_tag"
          
          # 查找源代码zip包的下载链接
          download_link=$(echo "$latest_release" | jq -r '.assets[] | select(.name | test("Aseprite-.*?-Source\\.zip")) | .browser_download_url')
          
          if [ -z "$download_link" ]; then
            echo "未找到源代码包，使用默认克隆方式"
            # 如果没有找到源代码包，就使用git克隆方式
            download_link="https://github.com/aseprite/aseprite/archive/refs/tags/$release_tag.zip"
          fi
          
          echo "release-tag=$release_tag" >> $GITHUB_OUTPUT
          echo "download-link=$download_link" >> $GITHUB_OUTPUT

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: fetch-aseprite-info
    permissions:
      contents: write
    outputs:
      download-link: ${{ needs.fetch-aseprite-info.outputs.download-link }}
      release-tag: ${{ needs.fetch-aseprite-info.outputs.release-tag }}
    steps:
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.fetch-aseprite-info.outputs.release-tag }}
          body: Aseprite-${{ needs.fetch-aseprite-info.outputs.release-tag }}
          skipIfReleaseExists: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build-aseprite:
    name: Build Aseprite
    needs: create-release
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macOS-latest ]
      fail-fast: false
    steps:
      - name: Install Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libxrandr-dev libgl1-mesa-dev \
            libfontconfig1-dev
      
      - uses: actions/checkout@v4
      
      - name: Install Aseprite
        shell: bash
        run: |
          # 删除旧目录（如果存在）
          rm -rf aseprite
          # 克隆最新版本的代码
          git clone --recurse-submodules -j8 https://github.com/aseprite/aseprite --branch ${{ needs.create-release.outputs.release-tag }}
          echo "已克隆 Aseprite 版本: ${{ needs.create-release.outputs.release-tag }}"
      
      - name: Install Skia
        working-directory: aseprite
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            choco install wget -y --no-progress
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          elif [[ "${{ runner.os }}" == "macOS" ]] ; then
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-macOS-Release-arm64.zip
            unzip Skia-macOS-Release-arm64.zip -d skia
          else
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Linux-Release-x64.zip
            unzip Skia-Linux-Release-x64.zip -d skia
          fi
      
      - uses: aseprite/get-ninja@main
      
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
      
      - name: Generating Makefiles
        shell: bash
        working-directory: aseprite
        run: |
          export enable_ccache=off
          export laf_backend=skia
          export enable_scripting=on
